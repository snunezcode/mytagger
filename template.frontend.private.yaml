AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to deploy a Metadata Management Solution'

Parameters:

  StackID:
    Type: String
    Description: 'StackIdentifier'
    Default: 'Stack-01'

  DockerImage:
    Type: String
    Description: 'Docker image URI'
    Default: 'public.ecr.aws/nginx/nginx:stable-perl'
  
  AllowedIPv4CIDR:
    Type: String
    Description: 'IPv4 CIDR block to allow access'
    Default: '192.168.1.1/32'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  
  AllowedIPv6CIDR:
    Type: String
    Description: 'IPv6 CIDR block to allow access'
    Default: '::/0'
    AllowedPattern: '^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))$'

  VPCId:
      Type: AWS::EC2::VPC::Id
      Description: 'VPC ID where the App Runner service will be deployed'

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: 'Subnet ID for the App Runner VPC Connector'

Resources:
  AppRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for App Runner service'
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'Allow HTTPS traffic from IPv4'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
          Description: 'Allow HTTPS traffic from IPv6'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'Allow HTTP traffic from IPv4'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
          Description: 'Allow HTTP traffic from IPv6'
      Tags:
        - Key: Name
          Value: !Sub '${StackID}-apprunner-sg'

  AppRunnerVpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.apprunner.requests'
      VpcId: !Ref VPCId
      VpcEndpointType: Interface
      SubnetIds: 
        - !Ref SubnetId
      SecurityGroupIds:
        - !Ref AppRunnerSecurityGroup
      PrivateDnsEnabled: false

  
 
  # VPC Connector for App Runner
  #AppRunnerVpcConnector:
  #  Type: AWS::AppRunner::VpcConnector
  #  Properties:
  #    VpcConnectorName: !Sub '${StackID}-vpc-connector'
  #    Subnets: 
  #      - !Ref SubnetId
  #    SecurityGroups:
  #      - !Ref AppRunnerSecurityGroup

  AppRunnerAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 
                - 'build.apprunner.amazonaws.com'
                - 'wafv2.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: "AppRunnerdPolicy"
          PolicyDocument: !Sub |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ecr:GetDownloadUrlForLayer",
                          "ecr:BatchGetImage",
                          "ecr:DescribeImages",
                          "ecr:GetAuthorizationToken",
                          "ecr:BatchCheckLayerAvailability"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }


  AppRunnerService:
    Type: 'AWS::AppRunner::Service'
    DependsOn: AppRunnerVpcEndpoint
    Properties:
      ServiceName: !Sub '${StackID}-apprunner'
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt AppRunnerAccessRole.Arn
        ImageRepository:
          ImageIdentifier: !Ref DockerImage
          ImageConfiguration:
            Port: '80'
          ImageRepositoryType: 'ECR'
        AutoDeploymentsEnabled: false
      InstanceConfiguration:
        Cpu: '1 vCPU'
        Memory: '2 GB'
      NetworkConfiguration:        
        IngressConfiguration:
          IsPubliclyAccessible: false

  AppRunnerVpcIngressConnection:
    Type: AWS::AppRunner::VpcIngressConnection
    Properties:
      IngressVpcConfiguration:
        VpcEndpointId: !Ref AppRunnerVpcEndpoint
        VpcId: !Ref VPCId
      ServiceArn: !GetAtt AppRunnerService.ServiceArn
      VpcIngressConnectionName: !Sub '${StackID}-connection'
  
Outputs:
  AppRunnerServiceURL:
    Description: 'URL of the App Runner service'
    Value: !GetAtt AppRunnerService.ServiceUrl

