AWSTemplateFormatVersion: '2010-09-09'
Description: 'Tagger Solution - (uksb-kzxy2tzxlf)'

Parameters:
  Username:
      Type: String
      Description: Username (email)
      AllowedPattern: "\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]{2,14}"
      Default: "myemail@example.com"

  S3Artifacts:
      Type: String
      Description: S3 Artifacts
  
  

Resources:


######################################################################
########
########   -----------------          DSQL Cluster   -----------------
########
######################################################################



  DSQLCluster:
    Type: AWS::DSQL::Cluster
    Properties:
      DeletionProtectionEnabled: false
      Tags: 
        - Key: Name
          Value: !Join [ "-", ["tagger", !Ref AWS::AccountId , !Select [3, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]


######################################################################
########
########   -----------------          Security      -----------------
########
######################################################################



  IAMRoleCognito:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          RoleName: "tagger-mng-role-coginito"
          AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cognito-idp.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
          MaxSessionDuration: 3600
          Description: "Allows Cognito to use SMS MFA on your behalf."
          Policies:
          - PolicyName: "CognitoPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - "sns:publish"
                  Resource: "*"


  CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
          UserPoolName: "tagger-mng-user-pool-cognito"           
          Policies: 
              PasswordPolicy: 
                  MinimumLength: 8
                  RequireUppercase: true
                  RequireLowercase: true
                  RequireNumbers: true
                  RequireSymbols: true
                  TemporaryPasswordValidityDays: 7
          LambdaConfig: {}
          AutoVerifiedAttributes: 
            - "email"
          UsernameAttributes: 
            - "email"
          MfaConfiguration: "OPTIONAL"
          SmsConfiguration: 
              SnsCallerArn: !GetAtt IAMRoleCognito.Arn 
              SnsRegion: !Ref AWS::Region
          EmailConfiguration: 
              EmailSendingAccount: "COGNITO_DEFAULT"
          AdminCreateUserConfig: 
              AllowAdminCreateUserOnly: true
          UserPoolTags: {}
          AccountRecoverySetting: 
              RecoveryMechanisms: 
                - 
                  Priority: 1
                  Name: "verified_email"
          UsernameConfiguration: 
              CaseSensitive: false
          VerificationMessageTemplate: 
              DefaultEmailOption: "CONFIRM_WITH_CODE"

  CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
          UserPoolId: !Ref CognitoUserPool
          ClientName: "tagger-mng-user-pool-client-cognito"                    
          RefreshTokenValidity: 1
          ReadAttributes: 
            - "address"
            - "birthdate"
            - "email"
            - "email_verified"
            - "family_name"
            - "gender"
            - "given_name"
            - "locale"
            - "middle_name"
            - "name"
            - "nickname"
            - "phone_number"
            - "phone_number_verified"
            - "picture"
            - "preferred_username"
            - "profile"
            - "updated_at"
            - "website"
            - "zoneinfo"
          WriteAttributes: 
            - "address"
            - "birthdate"
            - "email"
            - "family_name"
            - "gender"
            - "given_name"
            - "locale"
            - "middle_name"
            - "name"
            - "nickname"
            - "phone_number"
            - "picture"
            - "preferred_username"
            - "profile"
            - "updated_at"
            - "website"
            - "zoneinfo"
          ExplicitAuthFlows: 
            - "ALLOW_REFRESH_TOKEN_AUTH"
            - "ALLOW_USER_SRP_AUTH"
          PreventUserExistenceErrors: "ENABLED"
          AllowedOAuthFlowsUserPoolClient: false
          IdTokenValidity: 1440
          AccessTokenValidity: 1440
          TokenValidityUnits: 
              AccessToken: "minutes"
              IdToken: "minutes"
              RefreshToken: "days"

  CognitoUserPoolUser:
      Type: "AWS::Cognito::UserPoolUser"
      Properties:
          Username: !Ref Username
          UserPoolId: !Ref CognitoUserPool
          UserAttributes: 
            - 
              Name: "email_verified"
              Value: "true"
            - 
              Name: "email"
              Value: !Ref Username

######################################################################
########
########   -----------------          Backend        -----------------
########
######################################################################

  
  S3PluginBucket:
      Type: "AWS::S3::Bucket"
      UpdateReplacePolicy: Retain
      DeletionPolicy: Retain
      Properties:          
          BucketName: !Join [ "-", ["tagger-mng-s3-libraries", !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          BucketEncryption: 
              ServerSideEncryptionConfiguration: 
                - 
                  ServerSideEncryptionByDefault: 
                      SSEAlgorithm: "AES256"
                  BucketKeyEnabled: true
          OwnershipControls: 
              Rules: 
                - 
                  ObjectOwnership: "BucketOwnerEnforced"
          PublicAccessBlockConfiguration: 
              BlockPublicAcls: true
              BlockPublicPolicy: true
              IgnorePublicAcls: true
              RestrictPublicBuckets: true

  ApiGatewayRestApi:
      Type: "AWS::ApiGateway::RestApi"
      Properties:
          Name: "tagger-mng-api-gateway"
          ApiKeySourceType: "HEADER"
          EndpointConfiguration: 
              Types: 
                - "REGIONAL"
  
  ApiGatewayDeployment:
      DependsOn:
        - "ApiGatewayMethod"
        - "ApiGatewayMethod2"
      Type: "AWS::ApiGateway::Deployment"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayStage:
      Type: "AWS::ApiGateway::Stage"
      Properties:
          StageName: "v1"            
          RestApiId: !Ref ApiGatewayRestApi
          CacheClusterEnabled: false
          TracingEnabled: false
          DeploymentId: !Ref ApiGatewayDeployment

  ApiGatewayMethod:
      Type: "AWS::ApiGateway::Method"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId 
          HttpMethod: "POST"
          AuthorizationType: "COGNITO_USER_POOLS"
          AuthorizerId: !Ref ApiGatewayAuthorizer
          ApiKeyRequired: false
          MethodResponses: 
            - 
              ResponseModels: 
                  "application/json": "Empty"
              StatusCode: "200"
          Integration: 
              CacheNamespace: !GetAtt ApiGatewayRestApi.RootResourceId 
              ContentHandling: "CONVERT_TO_TEXT"
              IntegrationHttpMethod: "POST"
              IntegrationResponses: 
                - 
                  ResponseTemplates: {}
                  StatusCode: "200"
              PassthroughBehavior: "WHEN_NO_MATCH"
              TimeoutInMillis: 29000
              Type: "AWS_PROXY"
              Uri : 
                !Join
                  - ''
                  - - 'arn:aws:apigateway:'                      
                    - !Ref AWS::Region
                    - ":lambda:path/2015-03-31/functions/arn:aws:lambda:"
                    - !Ref AWS::Region
                    - ":"
                    - !Ref AWS::AccountId
                    - ":function:"
                    - "tagger-mng-lambda-api"
                    - "/invocations"


  ApiGatewayMethod2:
      Type: "AWS::ApiGateway::Method"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId 
          HttpMethod: "OPTIONS"
          AuthorizationType: "NONE"
          ApiKeyRequired: false
          RequestParameters: {}
          MethodResponses: 
            - 
              ResponseModels: 
                  "application/json": "Empty"
              ResponseParameters: 
                  "method.response.header.Access-Control-Allow-Headers": false
                  "method.response.header.Access-Control-Allow-Methods": false
                  "method.response.header.Access-Control-Allow-Origin": false
              StatusCode: "200"
          Integration: 
              CacheNamespace: !GetAtt ApiGatewayRestApi.RootResourceId 
              IntegrationResponses: 
                - 
                  ResponseParameters: 
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Headers,Access-Control-Allow-Origin'"
                      "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS,POST'"
                      "method.response.header.Access-Control-Allow-Origin": "'*'"                        
                  StatusCode: "200"
              PassthroughBehavior: "WHEN_NO_MATCH"
              RequestTemplates: 
                  "application/json": "{\"statusCode\": 200}"
              TimeoutInMillis: 29000
              Type: "MOCK"

  ApiGatewayAuthorizer:
      DependsOn:
          - "CognitoUserPool"
      Type: "AWS::ApiGateway::Authorizer"
      Properties:
          RestApiId: !Ref ApiGatewayRestApi
          Name: "CognitoAutorizer"
          Type: "COGNITO_USER_POOLS"
          ProviderARNs: 
            - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${AWS::Region}_${CognitoUserPool.UserPoolId}"
          AuthType: "cognito_user_pools"
          IdentitySource: "method.request.header.Authorization"


  ApiLambdaPermission:
      Type: AWS::Lambda::Permission
      DependsOn: 
        - ApiGatewayRestApi
        - LambdaFunctionApi
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName: "tagger-mng-lambda-api"
        Principal: "apigateway.amazonaws.com"
        SourceArn: 
          !Join
            - ''
            - - 'arn:aws:execute-api'
              - ":"
              - !Ref AWS::Region
              - ":"
              - !Ref AWS::AccountId
              - ":"
              - !GetAtt ApiGatewayRestApi.RestApiId
              - "/*/POST/"



  IAMRoleLambdaGlobal:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          RoleName: "IAMRootRoleTaggerSolution"
          AssumeRolePolicyDocument: !Sub |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                },
                                "Action": "sts:AssumeRole"
                            }
                        ]
                    }
          Policies:
          - PolicyName: "LambdaPolicy"
            PolicyDocument:
              Fn::Sub:
                - |            
                  {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Action": [
                                  "logs:CreateLogGroup"
                              ],
                              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*",
                              "Effect": "Allow"
                          },
                          {
                              "Action": [
                                  "logs:CreateLogStream",
                                  "logs:PutLogEvents"
                              ],
                              "Resource": [
                                  "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tagger-mng-lambda-discovery:*",
                                  "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tagger-mng-lambda-api:*",
                                  "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tagger-mng-lambda-tagger:*",
                                  "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tagger-mng-lambda-initdb:*"
                              ],                            
                              "Effect": "Allow"
                          },                      
                          {                            
                              "Effect": "Allow",
                              "Action": [
                                  "dsql:DbConnectAdmin"
                              ],
                              "Resource": [
                                "arn:aws:dsql:${AWS::Region}:${AWS::AccountId}:cluster/${DSQLClusterIdentifier}"
                              ]
                          },
                          {
                              "Effect": "Allow",
                              "Action": [
                                  "lambda:InvokeFunction"
                              ],
                              "Resource": [
                                  "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:tagger-mng-lambda-discovery",
                                  "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:tagger-mng-lambda-tagger"
                              ]
                          },   
                          {
                              "Effect": "Allow",
                              "Action": [
                                  "sts:AssumeRole"
                              ],
                              "Resource": [
                                  "*"
                              ]
                          },                     
                          {
                              "Effect": "Allow",
                              "Action": [
                                  "s3:GetObject",
                                  "s3:ListBucket",
                                  "s3:PutObject"
                              ],
                              "Resource": [                                
                                  "arn:aws:s3:::${S3PluginBucket}",
                                  "arn:aws:s3:::${S3PluginBucket}/*"
                              ]
                          }
                      ]
                  }
                - {
                    DSQLClusterIdentifier: !GetAtt DSQLCluster.Identifier
                  }    
            
 
  LambdaFunctionApi:
    Type: AWS::Lambda::Function
    Properties:        
      Environment: 
          Variables:                                        
              DBHOST: !Join [ "", [!Ref DSQLCluster, ".dsql.", !Ref AWS::Region, ".on.aws" ]]              
              DBNAME: "postgres"
              DBPORT: "5432"
              DBUSER: "admin"
              IAM_SCAN_ROLE : !Ref IAMChildRoleTaggerSolution              
              LAMBDA_METADATA_DISCOVERY: !Ref LambdaFunctionDiscovery
              LAMBDA_METADATA_TAGGING: !Ref LambdaFunctionTagger
              MAX_WORKERS : "10"              
              REGION: !Ref AWS::Region
              S3_BUCKET_MODULES : !Ref S3PluginBucket

      FunctionName: "tagger-mng-lambda-api"
      Handler: "lambda_function.lambda_handler"
      Architectures: 
        - "x86_64"
      MemorySize: 1024      
      Role: !GetAtt IAMRoleLambdaGlobal.Arn
      Runtime: "python3.11"
      Timeout: 900
      TracingConfig: 
          Mode: "PassThrough"
      EphemeralStorage: 
          Size: 512
      Layers:
        - !Ref LambdaLayer        
      Code:
        S3Bucket: !Ref S3Artifacts
        S3Key: "functions/lambda.api.zip"


  LambdaFunctionDiscovery:
    Type: AWS::Lambda::Function
    Properties:        
      Environment: 
          Variables:                          
              DBHOST: !Join [ "", [!Ref DSQLCluster, ".dsql.", !Ref AWS::Region, ".on.aws" ]]              
              DBNAME: "postgres"
              DBPORT: "5432"
              DBUSER: "admin"
              IAM_SCAN_ROLE : !Ref IAMChildRoleTaggerSolution
              MAX_WORKERS : "10"
              S3_BUCKET_METADATA : !Ref S3PluginBucket
              S3_BUCKET_MODULES : !Ref S3PluginBucket
              REGION: !Ref AWS::Region

      FunctionName: "tagger-mng-lambda-discovery"
      Handler: "lambda_function.lambda_handler"
      Architectures: 
        - "x86_64"
      MemorySize: 3000      
      Role: !GetAtt IAMRoleLambdaGlobal.Arn
      Runtime: "python3.11"
      Timeout: 900
      TracingConfig: 
          Mode: "PassThrough"
      EphemeralStorage: 
          Size: 512
      Layers:
        - !Ref LambdaLayer        
      Code:
        S3Bucket: !Ref S3Artifacts
        S3Key: "functions/lambda.discovery.zip"


  LambdaFunctionTagger:
    Type: AWS::Lambda::Function
    Properties:        
      Environment: 
          Variables:                          
              DBHOST: !Join [ "", [!Ref DSQLCluster, ".dsql.", !Ref AWS::Region, ".on.aws" ]]              
              DBNAME: "postgres"
              DBPORT: "5432"
              DBUSER: "admin"
              IAM_SCAN_ROLE : !Ref IAMChildRoleTaggerSolution
              MAX_WORKERS : "10"
              S3_BUCKET_METADATA : !Ref S3PluginBucket
              S3_BUCKET_MODULES : !Ref S3PluginBucket
              REGION: !Ref AWS::Region

      FunctionName: "tagger-mng-lambda-tagger"
      Handler: "lambda_function.lambda_handler"
      Architectures: 
        - "x86_64"
      MemorySize: 3000      
      Role: !GetAtt IAMRoleLambdaGlobal.Arn
      Runtime: "python3.11"
      Timeout: 900
      TracingConfig: 
          Mode: "PassThrough"
      EphemeralStorage: 
          Size: 512
      Layers:
        - !Ref LambdaLayer        
      Code:
        S3Bucket: !Ref S3Artifacts
        S3Key: "functions/lambda.tagger.zip"


  LambdaFunctionInitDB:
    Type: AWS::Lambda::Function
    Properties:        
      Environment: 
          Variables:                          
              DBHOST: !Join [ "", [!Ref DSQLCluster, ".dsql.", !Ref AWS::Region, ".on.aws" ]]              
              DBNAME: "postgres"
              DBPORT: "5432"
              DBUSER: "admin"
              IAM_SCAN_ROLE : !Ref IAMChildRoleTaggerSolution
              MAX_WORKERS : "10"
              S3_BUCKET_METADATA : !Ref S3PluginBucket
              S3_BUCKET_MODULES : !Ref S3PluginBucket
              REGION: !Ref AWS::Region

      FunctionName: "tagger-mng-lambda-initdb"
      Handler: "lambda_function.lambda_handler"
      Architectures: 
        - "x86_64"
      MemorySize: 128      
      Role: !GetAtt IAMRoleLambdaGlobal.Arn
      Runtime: "python3.11"
      Timeout: 60
      TracingConfig: 
          Mode: "PassThrough"
      EphemeralStorage: 
          Size: 512
      Layers:
        - !Ref LambdaLayer        
      Code:
        S3Bucket: !Ref S3Artifacts
        S3Key: "functions/lambda.initdb.zip"


  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: "tagger-mng-lambda-layer"
      Description: psycopg2, boto3 libraries
      Content:
        S3Bucket: !Ref S3Artifacts
        S3Key: "layers/lambda.layer.zip"
      CompatibleRuntimes:
        - python3.11
      LicenseInfo: MIT        

     


######################################################################
########
########   -----------------    IAM REMOTE ROLES    -----------------
########
######################################################################


  IAMPolicyTaggerSolution:
      Type: AWS::IAM::ManagedPolicy
      Properties:
          ManagedPolicyName: !Join [ "-", ["policy-tagger-process-solution-s1", !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument: !Sub |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                        "apigateway:GET",
                        "apigateway:PATCH",
                        "apigateway:PUT",
                        "apigateway:DELETE",
                        "apigateway:POST",
                        "backup:ListBackupVaults",
                        "backup:ListBackupPlans",
                        "backup:ListTags",
                        "backup:TagResource",
                        "dynamodb:ListTables",
                        "dynamodb:Describe*",
                        "dynamodb:TagResource",
                        "dynamodb:ListTagsOfResource",
                        "dax:DescribeClusters",
                        "dynamodb:ListBackups",
                        "ec2:Describe*",
                        "ec2:CreateTags",
                        "ec2:DeleteTags",
                        "ec2:DescribeVolumes",
                        "ec2:DescribeSnapshots",
                        "ec2:DescribeTransitGateways",
                        "ec2:DescribeTransitGatewayAttachments",
                        "ec2:DescribeTags",
                        "ec2:CreateTags",
                        "ecr:DescribeRepositories",
                        "ecr:ListTagsForResource",
                        "ecr:TagResource",
                        "ecs:ListClusters",
                        "ecs:DescribeClusters",
                        "ecs:ListTagsForResource",
                        "ecs:TagResource",
                        "eks:ListClusters",
                        "eks:ListTagsForResource",
                        "eks:TagResource",
                        "elasticfilesystem:Describe*",
                        "elasticfilesystem:CreateTags",
                        "elasticfilesystem:ListTagsForResource",
                        "elasticloadbalancing:AddTags",
                        "elasticloadbalancing:Describe*",
                        "elasticmapreduce:DescribeCluster",
                        "elasticmapreduce:ListClusters",
                        "elasticmapreduce:AddTags",
                        "fsx:TagResource",
                        "fsx:DescribeFileSystems",
                        "fsx:ListTagsForResource",
                        "fsx:DescribeBackups",
                        "lambda:List*",
                        "lambda:Get*",
                        "lambda:TagResource",
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents",
                        "logs:DescribeLogGroups",
                        "logs:DescribeLogStreams",
                        "redshift:CreateTags",
                        "redshift:Describe*",
                        "rds:ListTagsForResource",
                        "rds:Describe*",
                        "rds:DescribeDBInstances",
                        "rds:AddTagsToResource",
                        "s3:Get*",
                        "s3:List*",
                        "s3:PutBucketTagging",
                        "tag:Get*",
                        "tag:TagResources",
                        "transfer:ListServers",
                        "transfer:ListTagsForResource",
                        "transfer:TagResource",
                        "workspaces:DescribeWorkspaces",
                        "workspaces:CreateTags",
                        "rds:RemoveTagsFromResource",
                        "elasticloadbalancing:RemoveTags",
                        "elasticfilesystem:DeleteTags",
                        "fsx:UntagResource",
                        "dynamodb:UntagResource",
                        "lambda:UntagResource",
                        "backup:UntagResource",
                        "ecr:UntagResource",
                        "eks:UntagResource",
                        "eks:DescribeCluster",
                        "ecs:UntagResource",
                        "elasticmapreduce:RemoveTags",
                        "transfer:DescribeServer",
                        "transfer:UntagResource",
                        "elasticache:DescribeCacheSubnetGroups",
                        "elasticache:DescribeSnapshots",
                        "elasticache:DescribeCacheClusters",
                        "elasticache:DescribeReplicationGroups",
                        "elasticache:DescribeCacheParameterGroups",
                        "timestream:DescribeEndpoints",
                        "timestream:ListDatabases",
                        "timestream:ListTables",
                        "memorydb:DescribeClusters",
                        "memorydb:DescribeSnapshots",
                        "apigateway:PATCH",
                        "elasticfilesystem:TagResource",
                        "elasticfilesystem:UnTagResource",
                        "elasticache:AddTagsToResource",
                        "elasticache:RemoveTagsFromResource",
                        "memorydb:TagResource",
                        "memorydb:UnTagResource",
                        "timestream:TagResource",
                        "timestream:UnTagResource",
                        "timestream:ListTagsForResource",
                        "workspaces:DeleteTags"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Effect": "Allow",
                    "Action": [                        
                        "athena:ListDataCatalogs",
                        "athena:ListCapacityReservations",
                        "athena:ListTagsForResource",
                        "athena:TagResource",
                        "athena:UntagResource",
                        "cognito-identity:ListIdentityPools",
                        "cognito-identity:DescribeIdentityPool",
                        "cognito-identity:ListTagsForResource",
                        "cognito-identity:TagResource",
                        "cognito-identity:UntagResource",
                        "cognito-idp:ListUserPools",
                        "cognito-idp:DescribeUserPool",
                        "cognito-idp:DescribeUserPoolDomain",
                        "cognito-idp:ListTagsForResource",
                        "cognito-idp:TagResource",
                        "cognito-idp:UntagResource",
                        "ds:DescribeDirectories",
                        "ds:ListTagsForResource",
                        "ds:AddTagsToResource",
                        "ds:RemoveTagsFromResource",
                        "ec2:CreateTags",
                        "ec2:DeleteTags",
                        "ec2:DescribeTags",
                        "glacier:ListVaults",
                        "glacier:DescribeVault",
                        "glacier:ListTagsForVault",
                        "glacier:AddTagsToVault",
                        "glacier:RemoveTagsFromVault",
                        "glue:GetConnections",
                        "glue:GetConnection",
                        "glue:GetDatabases",
                        "glue:GetDatabase",
                        "glue:GetCrawlers",
                        "glue:GetCrawler",
                        "glue:ListSessions",
                        "glue:GetSession",
                        "glue:GetDevEndpoints",
                        "glue:GetDevEndpoint",
                        "glue:GetJobs",
                        "glue:GetJob",
                        "glue:GetTriggers",
                        "glue:GetTrigger",
                        "glue:ListWorkflows",
                        "glue:GetWorkflow",
                        "glue:ListBlueprints",
                        "glue:GetBlueprint",
                        "glue:GetMLTransforms",
                        "glue:GetMLTransform",
                        "glue:ListDataQualityRulesets",
                        "glue:GetDataQualityRuleset",
                        "glue:ListRegistries",
                        "glue:GetRegistry",
                        "glue:ListSchemas",
                        "glue:GetSchema",
                        "glue:GetTags",
                        "glue:TagResource",
                        "glue:UntagResource",
                        "kms:ListKeys",
                        "kms:ListAliases",
                        "kms:DescribeKey",
                        "kms:ListResourceTags",
                        "kms:TagResource",
                        "kms:UntagResource",
                        "medical-imaging:ListDatastores",
                        "medical-imaging:GetDatastore",
                        "medical-imaging:ListTagsForResource",
                        "medical-imaging:TagResource",
                        "medical-imaging:UntagResource",
                        "redshift:DescribeClusters",
                        "redshift:DescribeClusterSnapshots",
                        "redshift:DescribeClusterSubnetGroups",
                        "redshift:DescribeClusterParameterGroups",
                        "redshift:DescribeScheduledActions",
                        "redshift:DescribeTags",
                        "redshift:CreateTags",
                        "redshift:DeleteTags",
                        "redshift-serverless:ListWorkgroups",
                        "redshift-serverless:GetWorkgroup",
                        "redshift-serverless:ListNamespaces",
                        "redshift-serverless:GetNamespace",
                        "redshift-serverless:ListSnapshots",
                        "redshift-serverless:GetSnapshot",
                        "redshift-serverless:ListRecoveryPoints",
                        "redshift-serverless:GetRecoveryPoint",
                        "redshift-serverless:ListTagsForResource",
                        "redshift-serverless:TagResource",
                        "redshift-serverless:UntagResource",
                        "route53:ListHostedZones",
                        "route53:ListHealthChecks",
                        "route53:ListTagsForResource",
                        "route53:ChangeTagsForResource",
                        "route53resolver:ListResolverEndpoints",
                        "route53resolver:ListResolverRules",
                        "route53resolver:ListResolverQueryLogConfigs",
                        "route53resolver:ListFirewallDomainLists",
                        "route53resolver:ListFirewallRuleGroups",
                        "route53resolver:ListFirewallRuleGroupAssociations",
                        "route53resolver:ListTagsForResource",
                        "route53resolver:TagResource",
                        "route53resolver:UntagResource",
                        "route53-recovery-control-config:ListClusters",
                        "route53-recovery-control-config:ListControlPanels",
                        "route53-recovery-control-config:ListRoutingControls",
                        "route53-recovery-control-config:ListSafetyRules",
                        "route53-recovery-control-config:ListTagsForResource",
                        "route53-recovery-control-config:TagResource",
                        "route53-recovery-control-config:UntagResource",
                        "route53-recovery-readiness:ListCells",
                        "route53-recovery-readiness:ListReadinessChecks",
                        "route53-recovery-readiness:ListRecoveryGroups",
                        "route53-recovery-readiness:ListResourceSets",
                        "route53-recovery-readiness:ListTagsForResource",
                        "route53-recovery-readiness:TagResource",
                        "route53-recovery-readiness:UntagResource",
                        "route53domains:ListDomains",
                        "route53domains:ListTagsForDomain",
                        "route53domains:UpdateTagsForDomain",
                        "route53profiles:ListProfiles",
                        "route53profiles:ListProfileAssociations",
                        "route53profiles:ListTagsForResource",
                        "route53profiles:TagResource",
                        "route53profiles:UntagResource",
                        "secretsmanager:ListSecrets",
                        "secretsmanager:DescribeSecret",
                        "secretsmanager:TagResource",
                        "secretsmanager:UntagResource",
                        "securityhub:DescribeHub",
                        "securityhub:GetInsights",
                        "securityhub:GetEnabledStandards",
                        "securityhub:ListTagsForResource",
                        "securityhub:TagResource",
                        "securityhub:UntagResource",
                        "sns:ListTopics",
                        "sns:GetTopicAttributes",
                        "sns:ListTagsForResource",
                        "sns:TagResource",
                        "sns:UntagResource",
                        "sqs:ListQueues",
                        "sqs:GetQueueAttributes",
                        "sqs:ListQueueTags",
                        "sqs:TagQueue",
                        "sqs:UntagQueue",
                        "ssm:DescribeParameters",
                        "ssm:ListDocuments",
                        "ssm:DescribeMaintenanceWindows",
                        "ssm:DescribePatchBaselines",
                        "ssm:ListTagsForResource",
                        "ssm:AddTagsToResource",
                        "ssm:RemoveTagsFromResource",
                        "ssm-contacts:ListContacts",
                        "ssm-contacts:GetContact",
                        "ssm-contacts:ListTagsForResource",
                        "ssm-contacts:TagResource",
                        "ssm-contacts:UntagResource",
                        "ssm-incidents:ListResponsePlans",
                        "ssm-incidents:GetResponsePlan",
                        "ssm-incidents:ListIncidents",
                        "ssm-incidents:GetIncidentRecord",
                        "ssm-incidents:ListReplicationSets",
                        "ssm-incidents:GetReplicationSet",
                        "ssm-incidents:ListTagsForResource",
                        "ssm-incidents:TagResource",
                        "ssm-incidents:UntagResource",
                        "states:ListStateMachines",
                        "states:DescribeStateMachine",
                        "states:ListActivities",
                        "states:DescribeActivity",
                        "states:ListTagsForResource",
                        "states:TagResource",
                        "states:UntagResource"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Sid": "ApprunnerExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "apprunner:ListAutoScalingConfigurations",
                        "apprunner:ListConnections",
                        "apprunner:ListObservabilityConfigurations",
                        "apprunner:ListServices",
                        "apprunner:ListTagsForResource",
                        "apprunner:ListVpcConnectors",
                        "apprunner:ListVpcIngressConnections",
                        "apprunner:TagResource",
                        "apprunner:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "BedrockExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "bedrock:ListCustomModelDeployments",
                        "bedrock:ListCustomModels",
                        "bedrock:ListEvaluationJobs",
                        "bedrock:ListGuardrails",
                        "bedrock:ListImportedModels",
                        "bedrock:ListInferenceProfiles",
                        "bedrock:ListMarketplaceModelEndpoints",
                        "bedrock:ListModelCopyJobs",
                        "bedrock:ListModelCustomizationJobs",
                        "bedrock:ListModelImportJobs",
                        "bedrock:ListModelInvocationJobs",
                        "bedrock:ListPromptRouters",
                        "bedrock:ListProvisionedModelThroughputs",
                        "bedrock:ListTagsForResource",
                        "bedrock:TagResource",
                        "bedrock:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "BedrockAgentExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "bedrock:ListAgentActionGroups",
                        "bedrock:ListAgentAliases",
                        "bedrock:ListAgentCollaborators",
                        "bedrock:ListAgentVersions",
                        "bedrock:ListAgents",
                        "bedrock:ListDataSources",
                        "bedrock:ListFlowAliases",
                        "bedrock:ListFlowVersions",
                        "bedrock:ListFlows",
                        "bedrock:ListIngestionJobs",
                        "bedrock:ListKnowledgeBaseDocuments",
                        "bedrock:ListKnowledgeBases",
                        "bedrock:ListPrompts",
                        "bedrock:ListTagsForResource",
                        "bedrock:TagResource",
                        "bedrock:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "BedrockDataAutomationExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "bedrock:ListBlueprints",
                        "bedrock:ListDataAutomationProjects",
                        "bedrock:ListTagsForResource",
                        "bedrock:TagResource",
                        "bedrock:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "CloudfrontExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "cloudfront:ListCachePolicies",
                        "cloudfront:ListContinuousDeploymentPolicies",
                        "cloudfront:ListDistributions",
                        "cloudfront:ListFieldLevelEncryptionConfigs",
                        "cloudfront:ListFieldLevelEncryptionProfiles",
                        "cloudfront:ListFunctions",
                        "cloudfront:ListKeyGroups",
                        "cloudfront:ListOriginAccessControls",
                        "cloudfront:ListOriginRequestPolicies",
                        "cloudfront:ListRealtimeLogConfigs",
                        "cloudfront:ListResponseHeadersPolicies",
                        "cloudfront:ListStreamingDistributions",
                        "cloudfront:ListTagsForResource",
                        "cloudfront:TagResource",
                        "cloudfront:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "CloudhsmExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "cloudhsm:AddTagsToResource",
                        "cloudhsm:ListHapgs",
                        "cloudhsm:ListHsms",
                        "cloudhsm:ListLunaClients",
                        "cloudhsm:ListTagsForResource",
                        "cloudhsm:RemoveTagsFromResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "Cloudhsmv2ExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "cloudhsmv2:DescribeBackups",
                        "cloudhsmv2:DescribeClusters",
                        "cloudhsmv2:ListTags",
                        "cloudhsmv2:TagResource",
                        "cloudhsmv2:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "ComprehendExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "comprehend:ListDocumentClassificationJobs",
                        "comprehend:ListDocumentClassifiers",
                        "comprehend:ListDominantLanguageDetectionJobs",
                        "comprehend:ListEndpoints",
                        "comprehend:ListEntitiesDetectionJobs",
                        "comprehend:ListEntityRecognizers",
                        "comprehend:ListEventsDetectionJobs",
                        "comprehend:ListFlywheels",
                        "comprehend:ListKeyPhrasesDetectionJobs",
                        "comprehend:ListPiiEntitiesDetectionJobs",
                        "comprehend:ListSentimentDetectionJobs",
                        "comprehend:ListTagsForResource",
                        "comprehend:ListTargetedSentimentDetectionJobs",
                        "comprehend:ListTopicsDetectionJobs",
                        "comprehend:TagResource",
                        "comprehend:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "ConnectExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "connect:ListContactFlowModules",
                        "connect:ListContactFlows",
                        "connect:ListDefaultVocabularies",
                        "connect:ListEvaluationForms",
                        "connect:ListHoursOfOperations",
                        "connect:ListInstances",
                        "connect:ListIntegrationAssociations",
                        "connect:ListPhoneNumbersV2",
                        "connect:ListPrompts",
                        "connect:ListQueues",
                        "connect:ListQuickConnects",
                        "connect:ListRoutingProfiles",
                        "connect:ListSecurityProfiles",
                        "connect:ListTagsForResource",
                        "connect:ListTaskTemplates",
                        "connect:ListTrafficDistributionGroups",
                        "connect:ListUseCases",
                        "connect:ListUserHierarchyGroups",
                        "connect:ListUsers",
                        "connect:TagResource",
                        "connect:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "ConnectcampaignsExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "connect-campaigns:ListCampaigns",
                        "connect-campaigns:ListTagsForResource",
                        "connect-campaigns:TagResource",
                        "connect-campaigns:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "Connectcampaignsv2ExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "connect-campaigns:ListCampaigns",
                        "connect-campaigns:ListTagsForResource",
                        "connect-campaigns:TagResource",
                        "connect-campaigns:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "ConnectcasesExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "connect-cases:ListCaseRules",
                        "connect-cases:ListDomains",
                        "connect-cases:ListFields",
                        "connect-cases:ListLayouts",
                        "connect-cases:ListTagsForResource",
                        "connect-cases:ListTemplates",
                        "connect-cases:SearchCases",
                        "connect-cases:TagResource",
                        "connect-cases:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "DatabrewExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "databrew:ListDatasets",
                        "databrew:ListJobs",
                        "databrew:ListProjects",
                        "databrew:ListRecipes",
                        "databrew:ListRulesets",
                        "databrew:ListSchedules",
                        "databrew:ListTagsForResource",
                        "databrew:TagResource",
                        "databrew:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "DatasyncExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "datasync:ListAgents",
                        "datasync:ListLocations",
                        "datasync:ListTagsForResource",
                        "datasync:ListTaskExecutions",
                        "datasync:ListTasks",
                        "datasync:TagResource",
                        "datasync:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "DatazoneExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "datazone:ListAssetTypes",
                        "datazone:ListDataSources",
                        "datazone:ListDomains",
                        "datazone:ListEnvironmentProfiles",
                        "datazone:ListEnvironments",
                        "datazone:ListFormTypes",
                        "datazone:ListGlossaries",
                        "datazone:ListGlossaryTerms",
                        "datazone:ListProjects",
                        "datazone:ListTagsForResource",
                        "datazone:TagResource",
                        "datazone:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "DirectconnectExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "directconnect:DescribeConnections",
                        "directconnect:DescribeDirectConnectGatewayAssociationProposals",
                        "directconnect:DescribeDirectConnectGatewayAssociations",
                        "directconnect:DescribeDirectConnectGateways",
                        "directconnect:DescribeInterconnects",
                        "directconnect:DescribeLags",
                        "directconnect:DescribeTags",
                        "directconnect:DescribeVirtualInterfaces",
                        "directconnect:TagResource",
                        "directconnect:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "DrsExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "drs:DescribeLaunchConfigurationTemplates",
                        "drs:DescribeReplicationConfigurationTemplates",
                        "drs:DescribeSourceServers",
                        "drs:ListTagsForResource",
                        "drs:TagResource",
                        "drs:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "Ec2ExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "ec2:CreateTags",
                        "ec2:DeleteTags",
                        "ec2:DescribeAddresses",
                        "ec2:DescribeCapacityReservations",
                        "ec2:DescribeCarrierGateways",
                        "ec2:DescribeClientVpnEndpoints",
                        "ec2:DescribeCustomerGateways",
                        "ec2:DescribeDhcpOptions",
                        "ec2:DescribeFleets",
                        "ec2:DescribeFlowLogs",
                        "ec2:DescribeHosts",
                        "ec2:DescribeImages",
                        "ec2:DescribeInstances",
                        "ec2:DescribeInternetGateways",
                        "ec2:DescribeKeyPairs",
                        "ec2:DescribeLaunchTemplates",
                        "ec2:DescribeLocalGatewayRouteTables",
                        "ec2:DescribeLocalGatewayVirtualInterfaces",
                        "ec2:DescribeLocalGateways",
                        "ec2:DescribeManagedPrefixLists",
                        "ec2:DescribeNatGateways",
                        "ec2:DescribeNetworkAcls",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DescribePlacementGroups",
                        "ec2:DescribeRouteTables",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeSnapshots",
                        "ec2:DescribeSpotFleetRequests",
                        "ec2:DescribeSubnets",
                        "ec2:DescribeTransitGatewayAttachments",
                        "ec2:DescribeTransitGatewayRouteTables",
                        "ec2:DescribeTransitGatewayVpcAttachments",
                        "ec2:DescribeTransitGateways",
                        "ec2:DescribeVolumes",
                        "ec2:DescribeVpcEndpoints",
                        "ec2:DescribeVpcs",
                        "ec2:DescribeVpnConnections",
                        "ec2:DescribeVpnGateways"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "ElasticbeanstalkExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "elasticbeanstalk:DescribeApplicationVersions",
                        "elasticbeanstalk:DescribeApplications",
                        "elasticbeanstalk:DescribeConfigurationSettings",
                        "elasticbeanstalk:DescribeEnvironments",
                        "elasticbeanstalk:ListPlatformVersions",
                        "elasticbeanstalk:ListTagsForResource",
                        "elasticbeanstalk:UpdateTagsForResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "KafkaExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "kafka:ListClustersV2",
                        "kafka:ListConfigurations",
                        "kafka:ListReplicators",
                        "kafka:ListTagsForResource",
                        "kafka:ListVpcConnections",
                        "kafka:TagResource",
                        "kafka:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "KafkaconnectExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "kafkaconnect:ListConnectors",
                        "kafkaconnect:ListCustomPlugins",
                        "kafkaconnect:ListTagsForResource",
                        "kafkaconnect:ListWorkerConfigurations",
                        "kafkaconnect:TagResource",
                        "kafkaconnect:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "KendraExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "kendra:ListAccessControlConfigurations",
                        "kendra:ListDataSources",
                        "kendra:ListExperiences",
                        "kendra:ListFaqs",
                        "kendra:ListFeaturedResultsSets",
                        "kendra:ListIndices",
                        "kendra:ListQuerySuggestionsBlockLists",
                        "kendra:ListTagsForResource",
                        "kendra:ListThesauri",
                        "kendra:TagResource",
                        "kendra:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "KendrarankingExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "kendra-ranking:ListRescoreExecutionPlans",
                        "kendra-ranking:ListTagsForResource",
                        "kendra-ranking:TagResource",
                        "kendra-ranking:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "MgnExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "mgn:DescribeSourceServers",
                        "mgn:ListApplications",
                        "mgn:ListConnectors",
                        "mgn:ListTagsForResource",
                        "mgn:ListWaves",
                        "mgn:TagResource",
                        "mgn:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "NeptuneExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "neptune:AddTagsToResource",
                        "neptune:DescribeDbClusterEndpoints",
                        "neptune:DescribeDbClusterParameterGroups",
                        "neptune:DescribeDbClusterSnapshots",
                        "neptune:DescribeDbClusters",
                        "neptune:DescribeDbInstances",
                        "neptune:DescribeDbParameterGroups",
                        "neptune:DescribeDbSubnetGroups",
                        "neptune:DescribeEventSubscriptions",
                        "neptune:DescribeGlobalClusters",
                        "neptune:ListTagsForResource",
                        "neptune:RemoveTagsFromResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "NeptuneGraphExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "neptune-graph:ListExportTasks",
                        "neptune-graph:ListGraphSnapshots",
                        "neptune-graph:ListGraphs",
                        "neptune-graph:ListImportTasks",
                        "neptune-graph:ListPrivateGraphEndpoints",
                        "neptune-graph:ListQueries",
                        "neptune-graph:ListTagsForResource",
                        "neptune-graph:TagResource",
                        "neptune-graph:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "NetworkFirewallExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "network-firewall:ListFirewallPolicies",
                        "network-firewall:ListFirewalls",
                        "network-firewall:ListRuleGroups",
                        "network-firewall:ListTagsForResource",
                        "network-firewall:ListTlsInspectionConfigurations",
                        "network-firewall:TagResource",
                        "network-firewall:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "RekognitionExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "rekognition:DescribeCollection",
                        "rekognition:DescribeProjects",
                        "rekognition:ListCollections",
                        "rekognition:ListStreamProcessors",
                        "rekognition:ListTagsForResource",
                        "rekognition:TagResource",
                        "rekognition:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "S3ControlExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "s3control:DeleteAccessPointTagging",
                        "s3control:DeleteJobTagging",
                        "s3control:DeleteStorageLensConfigurationTagging",
                        "s3control:GetJobTagging",
                        "s3control:GetStorageLensConfigurationTagging",
                        "s3control:ListAccessGrants",
                        "s3control:ListAccessGrantsInstances",
                        "s3control:ListAccessGrantsLocations",
                        "s3control:ListAccessPoints",
                        "s3control:ListJobs",
                        "s3control:ListMultiRegionAccessPoints",
                        "s3control:ListStorageLensConfigurations",
                        "s3control:ListStorageLensGroups",
                        "s3control:PutAccessPointTagging",
                        "s3control:PutJobTagging",
                        "s3control:PutStorageLensConfigurationTagging"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "SagemakerExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "sagemaker:AddTags",
                        "sagemaker:DeleteTags",
                        "sagemaker:ListAlgorithms",
                        "sagemaker:ListApps",
                        "sagemaker:ListAutoMlJobs",
                        "sagemaker:ListClusters",
                        "sagemaker:ListCodeRepositories",
                        "sagemaker:ListDomains",
                        "sagemaker:ListEndpointConfigs",
                        "sagemaker:ListEndpoints",
                        "sagemaker:ListExperiments",
                        "sagemaker:ListFeatureGroups",
                        "sagemaker:ListHyperParameterTuningJobs",
                        "sagemaker:ListModelPackages",
                        "sagemaker:ListModels",
                        "sagemaker:ListNotebookInstances",
                        "sagemaker:ListPipelines",
                        "sagemaker:ListProcessingJobs",
                        "sagemaker:ListProjects",
                        "sagemaker:ListSpaces",
                        "sagemaker:ListTags",
                        "sagemaker:ListTrainingJobs",
                        "sagemaker:ListTransformJobs",
                        "sagemaker:ListTrialComponents",
                        "sagemaker:ListTrials",
                        "sagemaker:ListUserProfiles"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "SagemakerGeospatialExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "sagemaker-geospatial:ListEarthObservationJobs",
                        "sagemaker-geospatial:ListRasterDataCollections",
                        "sagemaker-geospatial:ListTagsForResource",
                        "sagemaker-geospatial:ListVectorEnrichmentJobs",
                        "sagemaker-geospatial:TagResource",
                        "sagemaker-geospatial:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "StoragegatewayExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "storagegateway:AddTagsToResource",
                        "storagegateway:DescribeFileSystemAssociations",
                        "storagegateway:DescribeTapes",
                        "storagegateway:ListFileShares",
                        "storagegateway:ListGateways",
                        "storagegateway:ListTagsForResource",
                        "storagegateway:ListTapePools",
                        "storagegateway:ListVolumes",
                        "storagegateway:RemoveTagsFromResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "TextractExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "textract:GetAdapter",
                        "textract:ListAdapterVersions",
                        "textract:ListAdapters",
                        "textract:ListTagsForResource",
                        "textract:TagResource",
                        "textract:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "WafExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "waf:ListByteMatchSets",
                        "waf:ListGeoMatchSets",
                        "waf:ListIpSets",
                        "waf:ListRateBasedRules",
                        "waf:ListRegexMatchSets",
                        "waf:ListRegexPatternSets",
                        "waf:ListRuleGroups",
                        "waf:ListRules",
                        "waf:ListSizeConstraintSets",
                        "waf:ListSqlInjectionMatchSets",
                        "waf:ListTagsForResource",
                        "waf:ListWebAcls",
                        "waf:ListXssMatchSets",
                        "waf:TagResource",
                        "waf:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "WafRegionalExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "waf-regional:ListByteMatchSets",
                        "waf-regional:ListGeoMatchSets",
                        "waf-regional:ListIpSets",
                        "waf-regional:ListRateBasedRules",
                        "waf-regional:ListRegexMatchSets",
                        "waf-regional:ListRegexPatternSets",
                        "waf-regional:ListRuleGroups",
                        "waf-regional:ListRules",
                        "waf-regional:ListSizeConstraintSets",
                        "waf-regional:ListSqlInjectionMatchSets",
                        "waf-regional:ListTagsForResource",
                        "waf-regional:ListWebAcls",
                        "waf-regional:ListXssMatchSets",
                        "waf-regional:TagResource",
                        "waf-regional:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "Wafv2ExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "wafv2:ListIpSets",
                        "wafv2:ListManagedRuleSets",
                        "wafv2:ListRegexPatternSets",
                        "wafv2:ListRuleGroups",
                        "wafv2:ListTagsForResource",
                        "wafv2:ListWebAcls",
                        "wafv2:TagResource",
                        "wafv2:UntagResource"
                    ],
                    "Resource": "*"
                },
                {
                    "Sid": "WisdomExactPermissions",
                    "Effect": "Allow",
                    "Action": [
                        "wisdom:ListAssistantAssociations",
                        "wisdom:ListAssistants",
                        "wisdom:ListContents",
                        "wisdom:ListImportJobs",
                        "wisdom:ListKnowledgeBases",
                        "wisdom:ListQuickResponses",
                        "wisdom:ListTagsForResource",
                        "wisdom:SearchSessions",
                        "wisdom:TagResource",
                        "wisdom:UntagResource"
                    ],
                    "Resource": "*"
                }
                ]
              }



  IAMChildRoleTaggerSolution:
      Type: "AWS::IAM::Role"
      DependsOn: IAMRoleLambdaGlobal
      Properties:
          Path: "/"
          RoleName: "IAMChildRoleTaggerSolution"
          AssumeRolePolicyDocument: !Sub |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "AWS": "${IAMRoleLambdaGlobal.Arn}"
                          },
                          "Action": "sts:AssumeRole"
                      }                      
                  ]
              }
          MaxSessionDuration: 3600
          ManagedPolicyArns:
              - !Ref IAMPolicyTaggerSolution

    
        



######################################################################
########
########   -----------------          OUTPUT        -----------------
########
######################################################################


Outputs:
   
    ApiURL:
        Description: API URL
        Value: !Join [ "", ["https://", !Ref ApiGatewayRestApi, ".execute-api.",!Ref AWS::Region,".amazonaws.com/v1/"]]

    CognitoUserPool:
        Description: Cognito User Pool
        Value: !GetAtt CognitoUserPool.UserPoolId

    CognitoUserPoolClient:
        Description: Cognito User Pool
        Value: !GetAtt CognitoUserPoolClient.ClientId
    
    IAMRootRoleTaggerSolution:
        Description: IAMRoleLambdaGlobal
        Value: !GetAtt IAMRoleLambdaGlobal.Arn

    S3PluginBucket:
        Description: S3PluginBucket
        Value: !Ref S3PluginBucket

    Region:
        Description: Region
        Value: !Ref AWS::Region
