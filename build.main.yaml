AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simple Lambda to clone repo and run script'

Parameters:
  Username:
      Type: String
      Description: Username (email)
      AllowedPattern: "\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]{2,14}"
      Default: "snmatus@amazon.com"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3DeploymentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - "*"                  
        - PolicyName: CloudFormationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: cloudformation:SendResponse
                Resource: '*'

  ExecuteRepoScript:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "mtdt-mng-lambda-deployment"
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300  # 5 minutes
      MemorySize: 2048
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import subprocess
          import os
          import logging
          import urllib.request
          import zipfile
          import shutil
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              logger.info(f"Received event: {json.dumps(event)}")
              
              # Extract parameters
              request_type = event['RequestType']
              resource_props = event['ResourceProperties']
              repo_owner = resource_props.get('RepoOwner')
              repo_name = resource_props.get('RepoName')
              repo_branch = resource_props.get('RepoBranch', 'main')
              script_path = resource_props.get('ScriptPath')
              bucket_name = resource_props.get('BucketName')
              physical_id = 'RepoScriptExecution'
              
              response_data = {}
              
              try:
                  # Handle delete request
                  if request_type == 'Delete':
                      logger.info("Delete request - no action needed")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_id)
                      return
                  
                  # For Create and Update: download repo and run script
                  work_dir = '/tmp/repo'
                  zip_path = '/tmp/repo.zip'
                  
                  # Clean existing directory if it exists
                  if os.path.exists(work_dir):
                      shutil.rmtree(work_dir)
                  os.makedirs(work_dir)
                  
                  # Download repository as ZIP
                  zip_url = f"https://github.com/{repo_owner}/{repo_name}/archive/refs/heads/{repo_branch}.zip"
                  logger.info(f"Downloading repository from {zip_url}")
                  
                  try:
                      urllib.request.urlretrieve(zip_url, zip_path)
                  except Exception as e:
                      logger.error(f"Failed to download repo: {str(e)}")
                      raise
                  
                  # Extract ZIP file
                  logger.info("Extracting repository")
                  with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                      zip_ref.extractall('/tmp')
                  
                  # Find the extracted directory (it includes branch name)                  
                  extracted_dir = f"/tmp/{repo_name}-{repo_branch}"
                  print(extracted_dir)
                  if not os.path.exists(extracted_dir):
                      # Try alternate naming pattern
                      dirs = [d for d in os.listdir('/tmp') if os.path.isdir(os.path.join('/tmp', d)) and d.startswith(f"{repo_name}-")]
                      if dirs:
                          extracted_dir = os.path.join('/tmp', dirs[0])
                      else:
                          raise Exception(f"Could not find extracted repository directory")
                  
                  logger.info(f"Repository extracted to {extracted_dir}")
                  
                  # Make script executable
                  full_script_path = os.path.join(extracted_dir, script_path)
                  logger.info(f"Script path: {full_script_path}")
                  
                  if not os.path.exists(full_script_path):
                      raise Exception(f"Script path not found: {full_script_path}")
                  
                  os.chmod(full_script_path, 0o755)  # Make executable
                  
                  # Execute the script
                  logger.info(f"Executing script: {full_script_path}")
                  env = os.environ.copy()
                  env['BUCKET_NAME'] = bucket_name  # Pass bucket name to script
                  
                  result = subprocess.run(
                      [full_script_path],
                      cwd=extracted_dir,  # Run from repo root
                      env=env,
                      stdout=subprocess.PIPE,
                      stderr=subprocess.PIPE,
                      text=True,
                      check=True
                  )
                  
                  # Log script output
                  logger.info(f"Script stdout: {result.stdout}")
                  if result.stderr:
                      logger.info(f"Script stderr: {result.stderr}")
                  
                  # Add script output to response
                  response_data = {
                      'ScriptOutput': result.stdout,
                      'ExecutionTime': subprocess.check_output(['date']).decode('utf-8').strip()
                  }
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_id)
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)}, physical_id)

  RepoScriptExecution:
    Type: Custom::RepoScriptExecution
    Properties:
      ServiceToken: !GetAtt ExecuteRepoScript.Arn
      RepoOwner: "sunuezcode"  # GitHub username or organization
      RepoName: "mytagger"      # Repository name
      RepoBranch: "main"         # Branch name
      ScriptPath: "deploy-script.sh"  # Path to script in repo
      BucketName: "mtdt-mng-s3-application-12b94184e42f"
